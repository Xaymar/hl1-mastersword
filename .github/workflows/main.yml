name: Build

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_VERSION: "2023-01-29"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runner: [ "windows-2022", "macos-12", "ubuntu-22.04" ]
        generator: [ "MSVC", "GCC", "Clang" ]
        exclude:
          - runner: windows-2022
            generator: GCC
          - runner: windows-2022
            generator: Clang
          - runner: macos-12
            generator: MSVC
          - runner: macos-12
            generator: GCC
          - runner: ubuntu-22.04
            generator: MSVC
        include:
          # Windows (MSVC)
          - runner: windows-2022
            name: "Windows"
            package_name: "windows"
            CMAKE_SYSTEM_VERSION: "10.0.20348.0"
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM: "x64"

          # MacOS (Xcode/AppleClang)
          - runner: macos-12
            name: "MacOS"
            package_name: "macos"
            CMAKE_GENERATOR: "Xcode"
            CMAKE_OSX_DEPLOYMENT_TARGET: "10.15"
            CMAKE_OSX_ARCHITECTURES: "x86_64;arm64"

          # Ubuntu (GCC, Clang)
          - runner: ubuntu-22.04
            name: "Ubuntu 22.04"
            package_name: "ubuntu-22"
            CMAKE_GENERATOR: "Ninja"

    runs-on: "${{ matrix.runner }}"
    name: "${{ matrix.name }} (${{ matrix.generator }}, Qt${{ matrix.qt }})"
    env:
      CMAKE_GENERATOR: "${{ matrix.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matrix.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_GENERATOR_TOOLSET: "${{ matrix.CMAKE_GENERATOR_TOOLSET }}"
      CMAKE_SYSTEM_VERSION: "${{ matrix.CMAKE_SYSTEM_VERSION }}"
      CMAKE_OSX_DEPLOYMENT_TARGET: "${{ matrix.CMAKE_OSX_DEPLOYMENT_TARGET }}"
      CMAKE_OSX_ARCHITECTURES: "${{ matrix.CMAKE_OSX_ARCHITECTURES }}"
    steps:
    - name: "Clone"
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: "Gather Information"
      id: info
      shell: bash
      run: |
        # CMake Flags
        if [[ "${{ matrix.CMAKE_GENERATOR }}" != "" ]]; then
          echo "cmake_generator=-G \"${{ matrix.CMAKE_GENERATOR }}\"" >> $GITHUB_ENV
        fi
        if [[ "${{ matrix.CMAKE_GENERATOR_TOOLSET }}" != "" ]]; then
          echo "cmake_generator_toolset=-T \"${{ matrix.CMAKE_GENERATOR_TOOLSET }}\"" >> $GITHUB_ENV
        fi
        if [[ "${{ matrix.CMAKE_GENERATOR_PLATFORM }}" != "" ]]; then
          echo "cmake_generator_platform=-A \"${{ matrix.CMAKE_GENERATOR_PLATFORM }}\"" >> $GITHUB_ENV
        fi

    - name: "Install LLVM/Clang (Windows)"
      if: startsWith( matrix.runner, 'windows' )
      run: |
        curl "-kL" "https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.4/LLVM-14.0.4-win64.exe" "-f" "--retry" "5" "-o" "llvm.exe"
        7z x -y -o"C:\Program Files\LLVM" llvm.exe "bin" "include" "lib" "libexec" "share" "Uninstall.exe"
        echo "CLANG_PATH=\"C:\\Program Files\\LLVM\\bin\"" >> "${GITHUB_ENV}"

    - name: "Install LLVM/Clang (Ubuntu)"
      if: startsWith( matrix.runner, 'ubuntu' )
      shell: bash
      run: |
        curl -jLo /tmp/llvm.sh "https://apt.llvm.org/llvm.sh"
        chmod +x /tmp/llvm.sh
        sudo /tmp/llvm.sh 14 all
        sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-14 800
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-14 800
        echo "CLANG_PATH=/usr/bin" >> "${GITHUB_ENV}"

    - name: "Install LLVM/Clang (MacOS)"
      if: startsWith( matrix.runner, 'macos' )
      shell: bash
      run: |
        # LLVM
        brew install llvm@14
        echo "CLANG_PATH=$(brew --prefix llvm@14)/bin/" >> "${GITHUB_ENV}"

    - name: "Install Compiler (Ubuntu)"
      if: startsWith( matrix.runner, 'ubuntu' )
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get purge libjpeg9-dev:amd64 libjpeg8-dev:amd64 libjpeg-turbo8-dev:amd64
        sudo apt-get install \
          build-essential \
          checkinstall \
          pkg-config \
          cmake \
          ninja-build \
          git

        # Compiler
        if [[ "${{ matrix.generator }}" = "GCC" ]]; then
          sudo apt-get install gcc-10 g++10
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 800 --slave /usr/bin/g++ g++ /usr/bin/g++-10
          echo "CC=gcc-10" >> "${GITHUB_ENV}"
          echo "CXX=gcc-10" >> "${GITHUB_ENV}"
          echo "LD=ld" >> "${GITHUB_ENV}"
        elif [[ "${{ matrix.generator }}" = "Clang" ]]; then
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 800
          sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-14 800
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 800
          sudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-14 800
          sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-14 800
          echo "CC=clang-14" >> "${GITHUB_ENV}"
          echo "CXX=clang++-14" >> "${GITHUB_ENV}"
          echo "LD=lld" >> "${GITHUB_ENV}"
        fi

    - name: "Configure & Build (Debug)"
      continue-on-error: true
      shell: bash
      env:
        CMAKE_BUILD_TYPE: "Debug"
      run: |
        cmake \
          -S "${{ github.workspace }}" \
          -B "${{ github.workspace }}/build/debug" \
          ${{ env.cmake_generator }} \
          ${{ env.cmake_generator_toolset }} \
          ${{ env.cmake_generator_platform }} \
          -DCMAKE_OSX_ARCHITECTURES="${{ matrix.CMAKE_OSX_ARCHITECTURES }}" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="${{ matrix.CMAKE_OSX_DEPLOYMENT_TARGET }}" \
          -DCMAKE_SYSTEM_VERSION="${{ matrix.CMAKE_SYSTEM_VERSION }}" \
          -DCMAKE_BUILD_TYPE="${{ env.CMAKE_BUILD_TYPE }}" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/debug" \
          -DENABLE_CLANG=TRUE -DCLANG_PATH="${{ env.CLANG_PATH }}"
        if [[ "${{ matrix.runner }}" = windows* ]]; then
          cmake --build "build/debug" --config ${{ env.CMAKE_BUILD_TYPE }} --target install
        elif [[ "${{ matrix.runner }}" = ubuntu* ]]; then
          cmake --build "build/debug" --config ${{ env.CMAKE_BUILD_TYPE }} --target install
        elif [[ "${{ matrix.runner }}" = macos* ]]; then
          cmake --build "build/debug" --config ${{ env.CMAKE_BUILD_TYPE }} --target install
        fi

    - name: "Artifacts (Debug)"
      continue-on-error: true
      uses: actions/upload-artifact@v1
      with:
        name: "${{ matrix.runner }}-${{ matrix.generator }}-debug"
        path: "${{ github.workspace }}/build/debug"

    - name: "Configure & Build (Release)"
      shell: bash
      env:
        CMAKE_BUILD_TYPE: "RelWithDebInfo"
      run: |
        cmake \
          -S "${{ github.workspace }}" \
          -B "${{ github.workspace }}/build/release" \
          ${{ env.cmake_generator }} \
          ${{ env.cmake_generator_toolset }} \
          ${{ env.cmake_generator_platform }} \
          -DCMAKE_OSX_ARCHITECTURES="${{ matrix.CMAKE_OSX_ARCHITECTURES }}" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="${{ matrix.CMAKE_OSX_DEPLOYMENT_TARGET }}" \
          -DCMAKE_SYSTEM_VERSION="${{ matrix.CMAKE_SYSTEM_VERSION }}" \
          -DCMAKE_BUILD_TYPE="${{ env.CMAKE_BUILD_TYPE }}" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/release" \
          -DENABLE_CLANG=TRUE -DCLANG_PATH="${{ env.CLANG_PATH }}"
        if [[ "${{ matrix.runner }}" = windows* ]]; then
          cmake --build "build/release" --config ${{ env.CMAKE_BUILD_TYPE }} --target install
        elif [[ "${{ matrix.runner }}" = ubuntu* ]]; then
          cmake --build "build/release" --config ${{ env.CMAKE_BUILD_TYPE }} --target install/strip
        elif [[ "${{ matrix.runner }}" = macos* ]]; then
          cmake --build "build/release" --config ${{ env.CMAKE_BUILD_TYPE }} --target install
        fi

    - name: "Artifacts (Release)"
      uses: actions/upload-artifact@v1
      with:
        name: "${{ matrix.runner }}-${{ matrix.generator }}"
        path: "${{ github.workspace }}/build/release"

    - name: "Validate Formatting"
      shell: bash
      run: |
        cmake --build "${{ github.workspace }}/build/debug" --config Debug --target clang-format
        cmake --build "${{ github.workspace }}/build/release" --config RelWithDebInfo --target clang-format
        git --no-pager diff --patch --minimal HEAD --
        git update-index --refresh
        git diff-index --quiet HEAD --

    - name: "clang-tidy"
      continue-on-error: true
      shell: bash
      run: |
        cmake --build "${{ github.workspace }}/build/debug" --config Debug --target clang-tidy
        cmake --build "${{ github.workspace }}/build/release" --config RelWithDebInfo --target clang-tidy
        git --no-pager diff --patch --minimal HEAD --
        git update-index --refresh
        git diff-index --quiet HEAD --
